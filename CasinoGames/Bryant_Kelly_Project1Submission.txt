Bryant Kelly
CSC-5-48891
10/11/2023
2999966

BlackJack:

	The program (being all code related to the BlackJack game, including the static chips variable) begins by outputting how many chips the user has to bet with, and then the user is asked how much they would like to bet. If the bet is valid, then the user is randomly given two numerical cards (like a 5 and a 10). After the user receives their two initial cards, the dealer then draws two cards by using the same randomly assigned card function that was used with the user. The dealer's cards are outputted to the user. Then the user is asked whether they want to hit or stay. If they choose to hit, then they are given another card (which gets added to the running total number of cards that the user has, same with the dealer). The card's value, and the total number of cards (numerical values) are displayed to the user. The user is then prompted to hit or stay again. If they choose to hit again, the previously mentioned code will be run again until they choose to stay. If they choose to stay, then the dealer compares its total number of cards with 17, and if it is less than 17 then it hits. The same functions and code used with the user is used here to give the dealer another card. That card is displayed to the user. The dealer continues to hit, getting additional cards, until it is either equal to or greater than 17. After the dealer decides to stay, the total number of cards from both the user and dealer are compared. Whoever has the higher number wins, unless they are over 21. In which case, if they are both over 21, or bust, then they tie and the user receives back their initial bet. If the dealer is over 21, while the user is under 21 then the user automatically wins. If the user is over 21, the dealer is under 21 then the dealer automatically wins. If the user wins, they receive their initial bet added to their chips, but if they lose they have it removed from their chips. After determining who wins, if anyone, a win, lose, or tie message and the user's total chips left are outputted. Finally, the user is asked if they want to continue playing BlackJack. If they do, then the entire BlackJack program is run all over again. If they don't, then they are asked if they want to continue playing games. If so, then they are given the starting menu again. If not, then the program terminates. In order for simplicity, I decided to make all card values and symbols numerical, specifically the kings, queens, jacks, and aces. However, because of the uniqueness of the aces' value I tried finding a way to allow the value of an ace to be changed after it's been set, but I wasn't able to. Instead I created a condition, where the newly received cards get their associated values, that checks whether the total hand (or number of cards all together) is less than or equal to 10. If so then the value of the ace, assuming that the newly drawn card is an ace, is assigned the value of 11. If not then the value of the ace is assigned 1, in order to somewhat resemble the automatic changing of an ace's value in order to prevent a bust. Except for this flaw within the game, it performs all of the functionalities associated with BlackJack.

Slots:

	The program (being all code related to the Slots game, including the static chips variable) begins by displaying how many chips they have, and then asks the user how much they would like to bet. If their bet is valid (if its less than or equal to the user's chips) then the main functionality of the program begins. First, three random numbers are chosen from 1 to 11. Then each number is run through a string function called slotSymbolAssignment, which compares the number to the following conditions. If the number is equal to 1 or 2, then the symbol "X" is returned. Else if the number is equal to 3 or 4, then the symbol "O" is returned. Else if the number is equal to 5 or 6, then the symbol "Z" is returned. Else if the number is equal to 7 or 8, then the symbol "Q" is returned. Else if the number is equal to 9 or 10, then the symbol "A" is returned. To conclude this series of if/else statements, else the symbol "$" is returned. The dollar sign ($) is the cherry, and as such these conditions give the cherry sign half the chance of appearing compared to the other symbols. This is true because the cherry can only appear if the number 11 is picked, while the other symbols can appear if one of two certain numbers are chosen. After these three numbers are run through the previous conditions, then each returned symbol is stored in a string variable. Then, the game is formatted (how it'll look) beginning with displaying "Bryant's Totally Legit Slots Game" at the top. After which, a line of dashes separates the randomly displayed symbols from the title. In the first row of symbols, three randomly chosen symbols (done in the same manner as before) are displayed one after the other with 2 spaces in between them (with the setw() manipulator). These symbols are different from the symbols assigned and stored in the beginning of the program because these symbols aren't stored in variables (they are merely displayed for cosmetic purposes). In the next row, the previous stored string symbols are displayed with 2 spaces in between them. In the next row, three randomly chosen symbols are again displayed (for cosmetic purposes) in the same manner as in the first row of symbols. After this last row of symbols, a line of dashes are displayed to contain the symbols (in a cosmetic manner). The previously stored symbols are now combined into a string that stores all three symbols which are now run through a function called slotsResult, wherein each symbol is compared to the following conditions (by using the location operator). However, before this occurs, a cherryMulitplier int variable is declared and initialized to 1, and a win int variable is declared and initialized to 0. If the symbol is equal to "X", "Z" (which is the wild), or "$" (cherry), then the symbol is put through another if condition. If the symbol is equal to "$" then 2 is added to cherryMultiplier, and win is set to 0. If condition isn't met then win is set to 0, and cherryMultiplier remains unchanged. Else (If the initial if condition isn't met) then win is set to 1. After the symbols are compared to the aforementioned conditions, another set of conditions are checked. If win is equal (equivalent) to 0, or cherryMultiplier is greater than 1, then the chips are set to chips + the user's initial bet * cherryMultiplier. Then "WIN" along with how many chips the user has left over. If this condition isn't met (specifically if win isn't equal to 0, or if the cherryMultiplier isn't greater than 1) then the chips are set equal to the chips - the user's bet. Then "LOSE" along with how many chips are left over is displayed. After this, the user is asked if they would like to continue playing slots. If they say yes, then all of the aforementioned code is run again. If they say no, then they are asked if they would still like to continue playing games, and if so then they would be prompted back to the beginning menu. If not, then the program will terminate. The program (specifically all of the code related to the slots game) achieves all of the desired functionality. The only flaw I would say that is within the code, is that the cherryMultiplier isn't scaled to the chance of the symbol appearing. For example, if 100 chips were bet, and the middle row contained one cherry ($) and other lose symbols. Then the user would receive 300 chips in addition to the total number of chips they had before they made the bet. So, in this case, they would have 400 chips in total (if they had 100 chips before the bet was made).